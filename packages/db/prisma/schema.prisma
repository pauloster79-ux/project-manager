// ---------- Prisma config ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum SignalType {
  EMAIL
  SLACK_MESSAGE
  MEETING_NOTE
  STATUS_UPDATE
  FILE
  WEBHOOK
  OTHER
}

enum ProposalStatus {
  PROPOSED
  APPLIED
  DISMISSED
}

// ---------- Core models ----------
model User {
  id          String  @id @default(cuid())
  email       String  @unique
  name        String
  slackUserId String? @unique

  // back-relations
  tasks         Task[]         @relation("TaskOwner")
  risks         Risk[]         @relation("RiskOwner")
  statusUpdates StatusUpdate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          String  @id @default(cuid())
  name        String
  description String?
  status      String?

  // relations
  tasks       Task[]
  risks       Risk[]
  updates     StatusUpdate[]
  connections ProjectConnection[]
  signals     Signal[]
  proposals   ProposedChange[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectConnection {
  id String @id @default(cuid())

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  provider String
  details  Json?

  createdAt DateTime @default(now())

  @@index([projectId])
  @@index([provider])
}

// ---------- Tasks ----------
model Task {
  id String @id @default(cuid())

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  ownerId String?
  owner   User?   @relation("TaskOwner", fields: [ownerId], references: [id])

  title       String
  description String?
  status      String
  priority    String

  // current version & history
  currentVersionId String?       @unique
  currentVersion   TaskVersion?  @relation("TaskCurrentVersion", fields: [currentVersionId], references: [id])
  versions         TaskVersion[] @relation("TaskVersions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@index([ownerId])
}

model TaskVersion {
  id String @id @default(cuid())

  // back-ref for Task.versions
  taskId String
  task   Task   @relation("TaskVersions", fields: [taskId], references: [id])

  // back-ref for Task.currentVersion (no fields/refs on this side)
  currentFor Task? @relation("TaskCurrentVersion")

  status   String?
  progress Int?
  dueDate  DateTime?

  createdAt DateTime @default(now())

  @@index([taskId])
}

// ---------- Risks ----------
model Risk {
  id String @id @default(cuid())

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  ownerId String?
  owner   User?   @relation("RiskOwner", fields: [ownerId], references: [id])

  title       String
  description String
  likelihood  String
  impact      String
  status      String

  currentVersionId String?       @unique
  currentVersion   RiskVersion?  @relation("RiskCurrentVersion", fields: [currentVersionId], references: [id])
  versions         RiskVersion[] @relation("RiskVersions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@index([ownerId])
}

model RiskVersion {
  id String @id @default(cuid())

  // back-ref for Risk.versions
  riskId String
  risk   Risk   @relation("RiskVersions", fields: [riskId], references: [id])

  // back-ref for Risk.currentVersion
  currentFor Risk? @relation("RiskCurrentVersion")

  probability Int?
  impact      Int?
  status      String?

  createdAt DateTime @default(now())

  @@index([riskId])
}

// ---------- Updates, Signals, Proposals ----------
model StatusUpdate {
  id String @id @default(cuid())

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  summary String?
  detail  String?

  createdAt DateTime @default(now())

  @@index([projectId])
  @@index([userId])
}

model Signal {
  id String @id @default(cuid())

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  type     SignalType
  provider String
  title    String?
  payload  Json?

  createdAt DateTime @default(now())

  @@index([projectId])
  @@index([provider])
}

model ProposedChange {
  id String @id @default(cuid())

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  entityType String
  entityId   String

  // NEW: summary used by the UI
  summary String?

  status     ProposalStatus @default(PROPOSED)
  confidence Float?
  rationale  String?

  createdAt DateTime @default(now())

  @@index([projectId])
  @@index([entityType, entityId])
}
